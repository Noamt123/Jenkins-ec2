Description:
  Udagram routing
Parameters:
  
  SiteName:
    Description: Name of the site
    Type: String

Resources:
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: 
        Fn::ImportValue:
          !Sub "${SiteName}-InternetGatewayId"
      VpcId: 
        Fn::ImportValue:
          !Sub "${SiteName}-VPCID"
  NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc
  NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc
  NatGateway1:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt NatGateway1EIP.AllocationId
          SubnetId:
            Fn::ImportValue:
              !Sub "${SiteName}-Public-Net-1"
  NatGateway2:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt NatGateway2EIP.AllocationId
          SubnetId:
            Fn::ImportValue:
              !Sub "${SiteName}-Public-Net-2"
  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: 
            Fn::ImportValue:
              !Sub "${SiteName}-VPCID"
          Tags:
              - Key: Name
                Value: !Sub ${SiteName} Public Routes
  DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: 
            Fn::ImportValue:
              !Sub "${SiteName}-InternetGatewayId"
  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: 
            Fn::ImportValue:
              !Sub "${SiteName}-Public-Net-1"
  PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: 
            Fn::ImportValue:
              !Sub "${SiteName}-Public-Net-2"
  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: 
            Fn::ImportValue:
              !Sub "${SiteName}-VPCID"
          Tags:
              - Key: Name
                Value: !Sub ${SiteName} Private Routes (AZ1)
  DefaultPrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          SubnetId: 
            Fn::ImportValue:
              !Sub "${SiteName}-Private-Net-1"
  PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: 
            Fn::ImportValue:
              !Sub "${SiteName}-VPCID"
          Tags:
              - Key: Name
                Value: !Sub ${SiteName} Private Routes (AZ2)
  DefaultPrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway2
  PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          SubnetId: 
            Fn::ImportValue:
              !Sub "${SiteName}-Private-Net-2"
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow only http to our subnets
      VpcId:
        Fn::ImportValue:
          !Sub "${SiteName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http, and ssh to our servers and allow the servers to access everything
      VpcId:
        Fn::ImportValue:
          !Sub "${SiteName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub | 
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            mv /etc/httpd/conf.d/welcome.conf /etc/httpd/conf.d/welcome.conf_backup
            systemctl restart httpd
            wget -P ../../var/www/html https://s3.us-east-1.amazonaws.com/poopy-crap/index.html
        ImageId: ami-0ad82a384c06c911e
 
        SecurityGroups:
        - Ref: WebServerSecGroup
        InstanceType: t3.micro
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${SiteName}-Private-Nets"
      LaunchConfigurationName: 
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${SiteName}-Public-Net-1"
      - Fn::ImportValue: !Sub "${SiteName}-Public-Net-2"
      SecurityGroups:
      - Ref: LBSecGroup
      Tags:
      - Key: Name
        Value: WebAppLB
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLB
        Port: '80'
        Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${SiteName}-VPCID"


      
